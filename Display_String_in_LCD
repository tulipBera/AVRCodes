/*
There are 2 register inside LCD, command register & Data register, RS pin is register select pin collect data from any digital pin if RS=0, register set to Command reg if RS=1 register set to Data register
16*2 means 2 rows 16 column, total 32 charater can display, each character takes 5*7 matrix
R/W pin connected to any digital pin RW=0, write R/W=1  Read
LEDA = +Ve, LEDK = -Ve, give light to display
E=1, connected to any digital pin, send data from microcontroller to LCD by D0-D7
VEE- connected to Pot meter, control the display brightness
8bit mode- D0-D7 all connected to port of Microcontroller collect 8 bit data for command and data, much faster
4bit mode- D4-D7 all only upper 3 bit of LCD connected to port of Microcontroller collect 8 bit data for command and data, used for save data pin, slower, for 8bit data we send it in 2 part

Hex code          Command
1           clear display screen
2           Return home
4          shift cursore to left
5          shift display to right
6          shift cursore to right
7          shift display to left
8          Display off cursore off
A          Display off cursore on
C          Display on cursore off
E          Display on cursore blinking
10         shift cursore position to to left
14         shift cursore position to to right
18         shift the entire display to the left
1C         shift the entire display to the right
80         Force cursore to begining of 1st line, 0 column
C0         Force cursore to begining of 2nd line, 0 column
8n         Force cursore to begining of 1st line, n column
Cn         Force cursore to begining of 2nd line, n column
38         2 lines and 5*7 matrix
*/



#include <avr/io.h>
#define F_CPU 1600000
#include <util/delay.h>

#define LCD_data_port PORTB
#define LCD_control_port PORTD
#define RS PORTD0
#define RW PORTD1
#define EN PORTD2

// define function by our own

void LCD_Command(unsigned char commnad);        // collecting an argument when we are calling the function
void LCD_DATA(unsigned char data);
void LCD_int();
void LCD_print(char *str);


void LCD_Command(unsigned char commnad){
	PORTD &= ~(1<<RS);      // set RS=0, for send the data to coommand register, to execute the command
	// 1 = 0000 0001, RS = bit number 0 (so, shift 0 times), so 1<<Rs = 0000 0001,  ~(1<<RS) = 1111 1110
	// PORTD &= ~(1<<RS) = XXXX XXXX AND 1111 1110 = XXXX XXX0,    so set the pin 0 as RS=0, without changing other bit state
	PORTD &= ~(1<<RW);
	LCD_data_port = commnad & 0xFF;    // send 8 bit data to the command register of LCD via LCD_data_port (portB)
	PORTD |= (1<<EN);        // set EN=1, EN is bit 2, 0000 0001<<2 = 0000 0100, PORTD |= (1<<EN) = XXXX XXXX | 0000 0100 = XXXX X1XX, setting EN=1, without chamging other bits
	_delay_ms(1);           // we are giving 1ms pulse to EN input
	PORTD &= ~(1<<EN);
	
}

void LCD_DATA(unsigned char data){
	PORTD |= (1<<RS);
	PORTD &= ~(1<<RW);
	LCD_data_port = data & 0xFF; 
	PORTD |= (1<<EN);        
	_delay_ms(1); 
	PORTD &= ~(1<<EN);
}

void LCD_init(){
	DDRB = 0xFF;      // define PORTB as output
	DDRD = 0xFF;      // define PORTD as output
	PORTD &= ~(1<<EN);      // initially set EN=0
	LCD_Command(0x33);
	LCD_Command(0x32);
	//LCD_Command(0x28);     for LCD use in 8 bit mode
	LCD_Command(0x0E);
	LCD_Command(0x01);       // clear LCD
	_delay_ms(2);
}

void LCD_print(const char *str){        // you can't pass a string to a non-const 'char*' pointer,if you do so, it'll give a deprecated conversion error, In C and C++, string literals are arrays of constant characters (const char[])
	unsigned char i=0;
	while(str[i]!=0){         // string ends with 0(null value) check that condition to print string
		LCD_DATA(str[i]);
		i++;
	}
}
int main(void)
{
	LCD_init();
	LCD_print("Hello!! Tulip!!");
    /* Replace with your application code */
    while (1);
	return 0;
}

